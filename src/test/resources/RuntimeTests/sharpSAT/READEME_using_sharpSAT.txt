This document explains how to use sharpSAT to compute the cardinality cardinality of an intensional set specified with a CNF or DNF formula with no free variables.

1) Compiling and using sharpSAT: sharpSAT can be downloaded from https://github.com/marcthurley/sharpSAT. Note that the master branch did not compile under Linux or Mac successfully. However, the "farbacktrack" branch compiled under Linux without any issues.
sharpSAT takes an input file describing the problem as a CNF formula. The standard to enter a CNF formula is described in http://people.sc.fsu.edu/~jburkardt/data/cnf/cnf.html.  Here is a brief description:
Let (v1 or -v5) and (v2 or -v3 or v4) be a CNF formula in propositional logic. The input file for sharpSAT can be the following:
	c Describing: (v1 or -v5) and (v2 or -v3 or v4)
	1 -5 0
	2 -3 4 0
A line that starts with a c is a comment. Each clause ends with a 0.

2) Converting the cardinality problem to a propositional problem: Assume we are trying to solve "| { (on X1, X2) (X1, X2) | X1=X2 or X1!=a1 } |" where |type(X1)|=|type(X2)|=3. So, F is "X1=X2 or X1!=a1". First, we name the other two elements in the domain as a2 and a3. Then, we define the following propositional variables:
	v1: X1 = a1
	v2: X1 = a2
	v3: X1 = a3
	v4: X2 = a1
	v5: X2 = a2
	v6: X2 = a3

The first series of clauses should determine that "X1 equals to a1 or a2 or a3". Similarly, we have to specify that "X2 equals to a1 or a2 or a3". The following clauses describe these:
	v1 or v2 or v3	; or simply: 1 2 3 0
	v4 or v5 or v6	; or simply: 4 5 6 0

Then we have to enforce that X1 and X2 can be at most one of a1, a2, a3. So if "X1=a1 => X1!=a2" and "X1=a1 => X1!=a3". We then have the following clauses:
	-v1 or -v2	; or simply: -1 -2 0
	-v1 or -v3	; or simply: -1 -3 0
	-v2 or -v3	; or simply: -2 -3 0
	-v4 or -v5	; or simply: -4 -5 0
	-v4 or -v6	; or simply: -4 -6 0
	-v5 or -v6	; or simply: -5 -6 0

So far, we have only described the domain. Now we need to describe the formula F. First, let us take a look at literals of the form "X=Y" or "X!=Y" which are considered as "hard literals" and need be expanded. For instance, the literal "X1=X2" need be defined using the propositional variables above. First, note that "X1=X2" is equivalent to "(X1=a1 and X2=a1) or (X1=a2 and X2=a2) or (X1=a3 and X2=a3)". Similarly "X1!=X2" is equivalent to "(X1=a1 and X2!=a1) or (X1=a2 and X2!=a2) or (X1=a3 and X2!=a3)". This expansions in DNF form. If F itself is in CNF form, the expansion of hard literals will generate a lot of clauses. One way to avoid this, is to compute the cardinality for -F whenever F is in CNF form, since -F will be in DNF form. In other words, here is the best way to deal with the conversion of F:
if F is in DNF form:
	G = expand_hard_literals(F) // expanding all hard literals
	H = convert_to_NNF(-G) // H is in CNF form
	Use H to generate clauses
else if F is in CNF form:
	G = expand_hard_literals(convert_to_NNF(-F))
	H = convert_to_NNF(-G) 	// H is in CNF form
	Use H to generate clauses

The final solution when F is DNF should be subtracted from |True|_X.

So, for our F, we expand and then negate it. Therefore H = "(X1!=a1 or X2!=a1) and (X1!=a2 or X2!=a2) and (X1!=a3 or X2!=a3) and X1=a1" and the clauses are:
	-1 -4 0
	-2 -5 0
	-3 -6 0
	1 0

Putting all together, the input for sharpSAT is:
c Solving "| { (on X1, X2) (X1, X2) | X1=X2 or X1!=a1 } |" with domain size=3
c We have 6 propositional variables, and 12 clauses. So:
p cnf 6 12
1 2 3 0
4 5 6 0
-1 -2 0
-1 -3 0
-2 -3 0
-4 -5 0
-4 -6 0
-5 -6 0
-1 -4 0
-2 -5 0
-3 -6 0
1 0
